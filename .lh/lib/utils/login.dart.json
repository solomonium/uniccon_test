{
    "sourceFile": "lib/utils/login.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1686214333843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1686214333843,
            "name": "Commit-0",
            "content": "// import 'dart:async';\n\n// import 'package:buypower_mobile_app/utils/colors.dart';\n// import 'package:buypower_mobile_app/utils/helper_widgets.dart';\n// import 'package:buypower_mobile_app/utils/validator.dart';\n// import 'package:buypower_mobile_app/widgets/bp_flat_button.dart';\n// import 'package:buypower_mobile_app/widgets/text_field.dart';\n// import 'package:firebase_remote_config/firebase_remote_config.dart';\n// import 'package:flutter/material.dart';\n// import 'package:flutter/services.dart';\n// import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n// import 'package:flutter_svg/svg.dart';\n// import 'package:local_auth/local_auth.dart';\n// import 'package:provider/provider.dart';\n\n// import '../../utils/route_name.dart';\n// import '../../utils/toast.dart';\n// import '../../viewmodels/auth_model.dart';\n// import '../../viewmodels/base_model.dart';\n// import '../../viewmodels/home_page_model.dart';\n// import '../../viewmodels/verification_model.dart';\n// import '../../widgets/app_large_text.dart';\n// import '../../widgets/app_text.dart';\n// import '../../widgets/modal_error_box.dart';\n\n// class Login extends StatefulWidget {\n//   final Map<String, dynamic> phone;\n//   final Map<String, dynamic> name;\n//   const Login({Key? key, required this.phone, required this.name})\n//       : super(key: key);\n\n//   @override\n//   _LoginState createState() => _LoginState();\n// }\n\n// enum _SupportState {\n//   unknown,\n//   supported,\n//   unsupported,\n// }\n\n// class _LoginState extends State<Login> {\n//   final _ffsStorage = const FlutterSecureStorage();\n//   final FirebaseRemoteConfig remoteConfig = FirebaseRemoteConfig.instance;\n//   final _formKey = GlobalKey<FormState>();\n//   final TextEditingController passwordController = TextEditingController();\n//   final LocalAuthentication auth = LocalAuthentication();\n//   _SupportState _supportState = _SupportState.unknown;\n//   final ValueNotifier _authorized = ValueNotifier(\"Not Authorized\");\n//   bool _isAuthenticated = false;\n//   bool _canCheckBiometric = false;\n//   late bool _faceBiometric = false;\n//   late bool _fingerBiometric = false;\n//   String _checkBioValue = \"\";\n//   // String _checkPhoneValue = \"\";\n\n//   // late ProgressBarHandler _handler;\n//   late AlertDialogBoxHandler _alertHandler;\n//   late String userName = '';\n//   late String phoneNumber = '';\n//   bool isVisible = true;\n//   bool _obscureText = true;\n\n//   @override\n//   void initState() {\n//     super.initState();\n//     context.read<AuthViewModel>().clearError();\n//     _getUserDetailsLocalStorage();\n//     checkBiometrics();\n//     auth.isDeviceSupported().then(\n//           (bool isSupported) => setState(() => _supportState = isSupported\n//               ? _SupportState.supported\n//               : _SupportState.unsupported),\n//         );\n//     // _authorized.addListener((){\n//     //   _biometricVerifyUser(_checkBioValue);\n//     // });\n//   }\n\n//   @override\n//   void dispose() {\n//     super.dispose();\n//     _authorized.dispose();\n//     passwordController.dispose();\n//   }\n\n//   Future checkBiometrics() async {\n//     await _checkBiometric();\n//     await _getAvailableBiometric();\n//   }\n\n//   ///TODO: check bio metric type  for face not only finger print\n//   Future _getAvailableBiometric() async {\n//     late List<BiometricType> availableBiometrics;\n//     try {\n//       availableBiometrics = await auth.getAvailableBiometrics();\n//       if (availableBiometrics.isEmpty) {\n//         return false;\n//       }\n//       if (availableBiometrics.contains(BiometricType.fingerprint) ||\n//           availableBiometrics[0] == BiometricType.weak ||\n//           availableBiometrics[1] == BiometricType.strong) {\n//         setState(() {\n//           _fingerBiometric = true;\n//         });\n//       } else if (availableBiometrics.contains(BiometricType.face)) {\n//         setState(() {\n//           _faceBiometric = true;\n//         });\n//       }\n//     } on PlatformException {\n//       availableBiometrics = <BiometricType>[];\n//       rethrow;\n//     }\n//     if (!mounted) {\n//       return;\n//     }\n//   }\n\n//   Future<void> _checkBiometric() async {\n//     late bool canCheckBiometric;\n//     try {\n//       canCheckBiometric = await auth.canCheckBiometrics;\n//     } on PlatformException {\n//       canCheckBiometric = false;\n//       rethrow;\n//     }\n//     if (!mounted) return;\n//     setState(() {\n//       _canCheckBiometric = canCheckBiometric;\n//     });\n//   }\n\n//   @override\n//   Widget build(BuildContext context) {\n//     // var phones = widget.phone['phone'];\n//     return SafeArea(\n//       child: Stack(\n//         children: [\n//           Scaffold(\n//             resizeToAvoidBottomInset: true,\n//             backgroundColor: Theme.of(context).primaryColor,\n//             appBar: AppBar(\n//               backgroundColor: Theme.of(context).primaryColor,\n//               bottomOpacity: 0.0,\n//               elevation: 0.0,\n//               leading: IconButton(\n//                 onPressed: () {\n//                   Navigator.pop(context);\n//                 },\n//                 icon: const Icon(\n//                   Icons.west,\n//                   color: AppColors.captionColor,\n//                 ),\n//               ),\n//             ),\n//             body: Semantics(\n//               label: 'Login Screen, provide us your password and login',\n//               child: Padding(\n//                 padding: const EdgeInsets.only(bottom: 24.0),\n//                 child: Form(\n//                   key: _formKey,\n//                   child: Column(\n//                     mainAxisAlignment: MainAxisAlignment.spaceBetween,\n//                     children: [\n//                       Padding(\n//                         padding: const EdgeInsets.all(24),\n//                         child: Column(\n//                           mainAxisAlignment: MainAxisAlignment.start,\n//                           crossAxisAlignment: CrossAxisAlignment.start,\n//                           children: <Widget>[\n//                             SingleChildScrollView(\n//                               scrollDirection: Axis.horizontal,\n//                               child: Row(\n//                                 children: [\n//                                   Semantics(\n//                                     label: 'Header text, welcome back user',\n//                                     child: AppLargeText(\n//                                       size: 24.0,\n//                                       text: remoteConfig\n//                                           .getString('login_page_salutation'),\n//                                     ),\n//                                   ),\n//                                   AppLargeText(\n//                                     text: ' $userName',\n//                                     size: 24,\n//                                   )\n//                                 ],\n//                               ),\n//                             ),\n//                             addVerticalSpace(24),\n//                             Semantics(\n//                               label: 'Password form Input',\n//                               child: BPTextField(\n//                                   textInputType: TextInputType.emailAddress,\n//                                   labelText: remoteConfig\n//                                       .getString('login_page_pwd_label_text'),\n//                                   textController: passwordController,\n//                                   autoFocus: false,\n//                                   validate: Validator.loginPasswordValidation,\n//                                   isPassword: true,\n//                                   obscureText: _obscureText,\n//                                   hintText: 'Enter Password',\n//                                   onSaved: (value) {\n//                                     passwordController.text = value!;\n//                                   },\n//                                   suffixIcon: InkWell(\n//                                     child: _obscureText\n//                                         ? const Icon(\n//                                             Icons.remove_red_eye,\n//                                             color: AppColors.captionColor,\n//                                             size: 20,\n//                                           )\n//                                         : const Icon(\n//                                             Icons.visibility_off_sharp,\n//                                             size: 20,\n//                                             color: AppColors.captionColor,\n//                                           ),\n//                                     onTap: () {\n//                                       setState(() {\n//                                         _obscureText = !_obscureText;\n//                                       });\n//                                     },\n//                                   ),\n//                                   textInputAction: TextInputAction.done),\n//                             ),\n//                             addVerticalSpace(16),\n//                             Semantics(\n//                               label: 'Reset Password text button',\n//                               child: Selector<AuthViewModel, ViewStatus>(\n//                                   selector: (_, model) => model.viewStatus,\n//                                   builder: (_, viewStatus, child) {\n//                                     return Align(\n//                                       alignment: Alignment.bottomRight,\n//                                       child: GestureDetector(\n//                                           onTap: () {\n//                                             _handleSendOtp();\n//                                           },\n//                                           child: viewStatus ==\n//                                                   ViewStatus.Loading\n//                                               ? const SizedBox(\n//                                                   width: 19,\n//                                                   height: 19,\n//                                                   child:\n//                                                       CircularProgressIndicator(\n//                                                     valueColor:\n//                                                         AlwaysStoppedAnimation<\n//                                                                 Color>(\n//                                                             Colors.white),\n//                                                   ),\n//                                                 )\n//                                               : AppLargeText(\n//                                                   text: remoteConfig.getString(\n//                                                       'login_page_forget_pwd_text'),\n//                                                   color: AppColors.primaryColor,\n//                                                   size: 14,\n//                                                 )),\n//                                     );\n//                                   }),\n//                             ),\n//                             addVerticalSpace(20),\n//                             Selector<AuthViewModel, String?>(\n//                                 selector: (_, model) => model.errorMessage,\n//                                 builder: (_, message, child) {\n//                                   if (message != null) {\n//                                     // return ErrorBox(message: message,);\n//                                     Toast.showErrorNotification(\n//                                         message,\n//                                         ToastConfig(\n//                                             duration:\n//                                                 const Duration(seconds: 5)));\n//                                   }\n//                                   return const SizedBox();\n//                                 }),\n//                           ],\n//                         ),\n//                       ),\n//                       Padding(\n//                         padding: const EdgeInsets.symmetric(horizontal: 24),\n//                         child: Selector<AuthViewModel, ViewStatus>(\n//                             selector: (_, model) => model.viewStatus,\n//                             builder: (_, viewStatus, child) {\n//                               return Semantics(\n//                                 label: 'Login Button',\n//                                 child: BpFlatButton(\n//                                   width: double.maxFinite,\n//                                   height: 52,\n//                                   isLoading: viewStatus == ViewStatus.Loading,\n//                                   formKey: _formKey,\n//                                   isResponsive: false,\n//                                   color: viewStatus == ViewStatus.Loading\n//                                       ? AppColors.dividerColor\n//                                       : AppColors.primaryColor,\n//                                   text: remoteConfig\n//                                       .getString('login_page_btn_text'),\n//                                   textSize: 14,\n//                                   textColor: Colors.white,\n//                                   borderRadius: 12,\n//                                   onPressed: () {\n//                                     viewStatus == ViewStatus.Loading\n//                                         ? null\n//                                         : _handleVerifyUser(\n//                                             passwordController.text);\n//                                   },\n//                                   borderColor: Theme.of(context).cardColor,\n//                                   borderWidth: 0,\n//                                 ),\n//                               );\n//                             }),\n//                       ),\n//                     ],\n//                   ),\n//                 ),\n//               ),\n//             ),\n//             bottomNavigationBar: BottomAppBar(\n//               color: Theme.of(context).primaryColor,\n//               elevation: 0.0,\n//               child: SizedBox(\n//                 // constraints: const BoxConstraints(minHeight: 50),\n//                 height:\n//                     (_canCheckBiometric && _checkBioValue.isNotEmpty) ? 120 : 0,\n//                 child: Visibility(\n//                   visible: _canCheckBiometric && _checkBioValue.isNotEmpty,\n//                   child: Column(\n//                     children: [\n//                       if (_fingerBiometric)\n//                         Column(\n//                           children: [\n//                             addVerticalSpace(24),\n//                             SizedBox(\n//                               height: 40,\n//                               width: 40,\n//                               child: GestureDetector(\n//                                 onTap: () {\n//                                   _authenticate();\n//                                 },\n//                                 child: SvgPicture.asset(\n//                                   'assets/icons/biometric.svg',\n//                                   color: AppColors.primaryColor,\n//                                 ),\n//                               ),\n//                             ),\n//                             addVerticalSpace(24),\n//                             AppText(\n//                               text: remoteConfig.getString('fingerprint_text'),\n//                               size: 14,\n//                             ),\n//                           ],\n//                         )\n//                       else if (_faceBiometric)\n//                         Column(\n//                           children: [\n//                             addVerticalSpace(24),\n//                             SizedBox(\n//                               height: 40,\n//                               width: 40,\n//                               child: GestureDetector(\n//                                 onTap: () {\n//                                   _authenticateWithBiometrics();\n//                                 },\n//                                 child: SvgPicture.asset(\n//                                   'assets/images/face_id.svg',\n//                                   color: AppColors.primaryColor,\n//                                 ),\n//                               ),\n//                             ),\n//                             addVerticalSpace(24),\n//                             AppText(\n//                               text: 'Tap to Login with Face ID',\n//                               size: 14,\n//                             ),\n//                           ],\n//                         )\n//                       else\n//                         const SizedBox(),\n//                     ],\n//                   ),\n//                 ),\n//               ),\n//             ),\n//           ),\n//           ModalAlertBox(\n//             message:\n//                 'Use your biometric to sign in and confirm payment. you can also set it up later in Settings',\n//             opacity: 0.5,\n//             title: 'Alert',\n//             alertHandleCallback: (AlertDialogBoxHandler handler) {\n//               _alertHandler = handler;\n//             },\n//             onYesPressed: () {\n//               return _saveUserDetailsFss(passwordController.text);\n//             },\n//             onNoPressed: () {\n//               _alertHandler.dismiss();\n//               return _getComplianceGotoDashboard();\n//             },\n//           ),\n//         ],\n//       ),\n//     );\n//   }\n\n//   // Widget _setUpButtonChild() {\n//   //   if (_isLoadingButton) {\n//   //     return Container(\n//   //       width: 19,\n//   //       height: 19,\n//   //       child: CircularProgressIndicator(\n//   //         valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\n//   //       ),\n//   //     );\n//   //   } else {\n//   //     return Text(\n//   //       \"Verify\",\n//   //       style: TextStyle(color: Colors.white),\n//   //     );\n//   //   }\n//   // }\n\n//   ///Login and check the response if it's successful we store the users number\n//   ///in Flutter_Secure_Storage abd show the user the modal to store password on\n//   ///the firs try of login\n//   Future _handleVerifyUser(String password) async {\n//     context.read<AuthViewModel>().clearError();\n//     FocusManager.instance.primaryFocus?.unfocus();\n//     var phones = widget.phone['phone'];\n//     final bool isValid = _formKey.currentState!.validate();\n//     if (isValid) {\n//       _formKey.currentState!.save();\n//       final res = await context.read<AuthViewModel>().login(phones, password);\n//       if (res != null && _checkBioValue.isEmpty) {\n//         return await getUserDetails();\n//       } else if (res != null) {\n//         return await getUserDetails();\n//       }\n//     }\n//   }\n\n//   Future _handleSendOtp() async {\n//     var phones = widget.phone['phone'];\n//     if (phones != null) {\n//       // _formkey.currentState!.save();\n//       final res = await context.read<AuthViewModel>().sendOTP(phones);\n//       if (!mounted) return;\n//       if (res != null) {\n//         Toast.showSuccessNotification(\n//             res, ToastConfig(duration: const Duration(seconds: 5)));\n//         return await Navigator.of(context).pushNamed(\n//             RouteName.securePasswordOTP,\n//             arguments: {'phone': phones});\n//       }\n//     }\n//   }\n\n//   Future _biometricVerifyUser(String password) async {\n//     context.read<AuthViewModel>().clearError();\n//     var phones = widget.phone['phone'];\n//     if (password.isNotEmpty) {\n//       final res = await context.read<AuthViewModel>().login(phones, password);\n//       if (res != null) {\n//         getUserDetails();\n//         // return await Navigator.of(context).pushNamedAndRemoveUntil(\n//         //     RouteName.dashboard, (Route<dynamic> route) => false);\n//       }\n//     }\n//   }\n\n//   Future<void> _authenticate() async {\n//     bool authenticated = false;\n//     try {\n//       _authorized.value = 'Authenticating';\n//       setState(() {\n//         _isAuthenticated = true;\n//       });\n//       authenticated = await auth.authenticate(\n//         localizedReason: \"Scan your finger to authenticate\",\n//         options: const AuthenticationOptions(\n//           useErrorDialogs: true,\n//           stickyAuth: true,\n//         ),\n//       );\n//       setState(() {\n//         _isAuthenticated = false;\n//       });\n//     } on PlatformException catch (e) {\n//       _authorized.value = 'Error - ${e.message}';\n//       setState(() {\n//         _isAuthenticated = false;\n//       });\n//       rethrow;\n//     } catch (e) {\n//       rethrow;\n//     }\n//     if (!mounted) {\n//       return;\n//     }\n//     final String message = authenticated ? 'Authorized' : 'Not Authorized';\n//     _authorized.value = message;\n//     if (message == 'Authorized') _biometricVerifyUser(_checkBioValue);\n//   }\n\n//   Future<void> _authenticateWithBiometrics() async {\n//     bool authenticated = false;\n//     try {\n//       setState(() {\n//         _isAuthenticated = true;\n//       });\n//       _authorized.value = 'Authenticating';\n//       authenticated = await auth.authenticate(\n//         localizedReason: 'Scan your face to authenticate',\n//         options: const AuthenticationOptions(\n//           useErrorDialogs: true,\n//           stickyAuth: true,\n//           biometricOnly: true,\n//         ),\n//       );\n//       setState(() {\n//         _isAuthenticated = true;\n//       });\n//       _authorized.value = 'Authenticating';\n//     } on PlatformException catch (e) {\n//       setState(() {\n//         _isAuthenticated = false;\n//       });\n//       _authorized.value = 'Error - ${e.message}';\n//       rethrow;\n//     }\n//     if (!mounted) {\n//       return;\n//     }\n//     final String message = authenticated ? 'Authorized' : 'Not Authorized';\n//     _authorized.value = message;\n//     if (message == 'Authorized') _biometricVerifyUser(_checkBioValue);\n//   }\n\n//   //Save user user details to Flutter_secure_storage.\n//   Future<void> _saveUserDetailsFss(String password) async {\n//     try {\n//       await _ffsStorage.write(\n//         key: 'KEY_PASSWORD',\n//         value: password,\n//       );\n//       if (!mounted) return;\n//       return _getComplianceGotoDashboard();\n//     } catch (e) {\n//       rethrow;\n//     }\n//   }\n\n//   Future<void> _saveUsersPhone() async {\n//     var phone = widget.phone['phone'];\n//     try {\n//       await _ffsStorage.write(key: 'KEY_PHONE', value: phone);\n//       if (_canCheckBiometric == true && _checkBioValue.isEmpty) {\n//         return _alertHandler.show();\n//       } else if (_canCheckBiometric == true && _checkBioValue.isNotEmpty) {\n//         return _getComplianceGotoDashboard();\n//       } else {\n//         if (_canCheckBiometric == false && _checkBioValue.isNotEmpty) {\n//           return _getComplianceGotoDashboard();\n//         }\n//       }\n//     } catch (e) {\n//       rethrow;\n//     }\n//   }\n\n//   Future _getComplianceGotoDashboard() async {\n//     final res = await context.read<VerifyViewModel>().verificationCompliance();\n//     if (!mounted) return;\n//     if (res.isNotEmpty) {\n//       return await Navigator.of(context).pushNamedAndRemoveUntil(\n//           RouteName.dashboard, (Route<dynamic> route) => false);\n//     } else {\n//       return await Navigator.of(context).pushNamedAndRemoveUntil(\n//           RouteName.dashboard, (Route<dynamic> route) => false);\n//     }\n//   }\n//   // IOSOptions _getIOSOptions() => const IOSOptions(\n//   //   accessibility: IOSAccessibility.first_unlock,\n//   // );\n//   // AndroidOptions _getAndroidOptions() => const AndroidOptions(\n//   //       encryptedSharedPreferences: true,\n//   //     );\n\n//   ///Read the stored phone number and compare it with the phone passed from\n//   ///welcome page through navigation route params then if true show the finger\n//   ///print access image else hide the finger print image\n//   Future<void> readSecureData() async {\n//     final userPhone = widget.phone['phone'];\n//     String? savedPassword;\n//     String? savedPhone;\n//     try {\n//       savedPassword = await _ffsStorage.read(key: 'KEY_PASSWORD');\n//       savedPhone = await _ffsStorage.read(key: 'KEY_PHONE');\n\n//       if (savedPhone != null &&\n//           savedPhone.isNotEmpty &&\n//           userPhone.contains(savedPhone)) {\n//         setState(() {\n//           _checkBioValue = savedPassword!;\n//         });\n//       } else {\n//         deleteFssData();\n//       }\n//     } catch (e) {\n//       rethrow;\n//     }\n//   }\n\n//   Future<void> deleteFssData() async {\n//     try {\n//       // await _ffsStorage.delete(key: 'KEY_PASSWORD');\n//       // await _ffsStorage.delete(key: 'KEY_PHONE');\n//       await _ffsStorage.deleteAll();\n//     } catch (e) {\n//       rethrow;\n//     }\n//   }\n\n//   Future getUserDetails() async {\n//     var res = await context.read<HomePageModel>().getMeDetails();\n//     if (res != null) {\n//       if (_canCheckBiometric == true) {\n//         return _saveUsersPhone();\n//       } else if (_canCheckBiometric == false) {\n//         return Navigator.of(context).pushNamedAndRemoveUntil(\n//             RouteName.dashboard, (Route<dynamic> route) => false);\n//       }\n//     }\n//   }\n\n//   Future _getUserDetailsLocalStorage() async {\n//     var names = widget.name['name'];\n//     setState(() {\n//       userName = names.split(' ')[0];\n//     });\n//     await readSecureData();\n//   }\n// }\n"
        }
    ]
}